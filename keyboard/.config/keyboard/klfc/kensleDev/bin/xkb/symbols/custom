// Generated by KLFC 1.5.6
// https://github.com/39aldo39/klfc

default
xkb_symbols "basic" {
    key <TLDE> { [        grave,   asciitilde ] };
    key <AE01> { [            1,       exclam ] };
    key <AE02> { [            2,           at ] };
    key <AE03> { [            3,   numbersign ] };
    key <AE04> { [            4,       dollar ] };
    key <AE05> { [            5,      percent ] };
    key <AE06> { [            6,  asciicircum ] };
    key <AE07> { [            7,    ampersand ] };
    key <AE08> { [            8,     asterisk ] };
    key <AE09> { [            9,    parenleft ] };
    key <AE10> { [            0,   parenright ] };
    key <AE11> { [        minus,   underscore ] };
    key <AE12> { [        equal,         plus ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND_ALPHABETIC";
    key <AD01> { [            q,            Q,       exclam ] };
    key <AD02> { [            w,            W,           at ] };
    key <AD03> { [            e,            E,   numbersign ] };
    key <AD04> { [            r,            R,   underscore ] };
    key <AD05> { [            t,            T,      percent ] };
    key.type[Group1] = "NONE_SHIFT_NUMLOCK_EXTEND_ALPHABETIC";
    key <AD06> { [            y,            Y,      percent,      percent ] };
    key <AD07> { [            u,            U,            7,         Home ] };
    key <AD08> { [            i,            I,            8,         Next ] };
    key <AD09> { [            o,            O,            9,        Prior ] };
    key <AD10> { [            p,            P,         plus,          End ] };
    key.type[Group1] = "TWO_LEVEL";
    key <AD11> { [  bracketleft,    braceleft ] };
    key <AD12> { [ bracketright,   braceright ] };
    key <BKSL> { [    backslash,          bar ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND_ALPHABETIC";
    key <AC01> { [            a,            A,     question ] };
    key <AC02> { [            s,            S,        grave ] };
    key <AC03> { [            d,            D,     quotedbl ] };
    key <AC04> { [            f,            F,   apostrophe ] };
    key <AC05> { [            g,            G,  asciicircum ] };
    key.type[Group1] = "NONE_SHIFT_NUMLOCK_EXTEND_ALPHABETIC";
    key <AC06> { [            h,            H,        equal,       dollar ] };
    key <AC07> { [            j,            J,            4,         Left ] };
    key <AC08> { [            k,            K,            5,         Down ] };
    key <AC09> { [            l,            L,            6,           Up ] };
    key.type[Group1] = "NONE_SHIFT_NUMLOCK_EXTEND";
    key <AC10> { [    semicolon,        colon,        minus,        Right ] };
    key.type[Group1] = "TWO_LEVEL";
    key <AC11> { [   apostrophe,     quotedbl ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND_ALPHABETIC";
    key <AB01> { [            z,            Z,          bar ] };
    key <AB02> { [            x,            X,  bracketleft ] };
    key <AB03> { [            c,            C,    braceleft ] };
    key <AB04> { [            v,            V,    parenleft ] };
    key <AB05> { [            b,            B,    ampersand ] };
    key.type[Group1] = "NONE_SHIFT_NUMLOCK_EXTEND_ALPHABETIC";
    key <AB06> { [            n,            N,            0,    backslash ] };
    key <AB07> { [            m,            M,            1,   parenright ] };
    key.type[Group1] = "NONE_SHIFT_NUMLOCK_EXTEND";
    key <AB08> { [        comma,         less,            2,   braceright ] };
    key <AB09> { [       period,      greater,            3, bracketright ] };
    key <AB10> { [        slash,     question,     asterisk,          bar ] };
    key.type[Group1] = "ONE_LEVEL";
    key <LALT> { [     Num_Lock ],
                 actions[Group1] = [ LockMods(mods=NumLock) ],
                 vmods=NumLock };
    key <CAPS> { [ ISO_Level5_Shift ],
                 actions[Group1] = [ SetMods(mods=LevelFive) ],
                 vmods=LevelFive };
    modifier_map Mod3 { ISO_Level5_Shift };
    modifier_map Mod2 { <NMLK> };
};
