!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
$FZF_DEFAULT_COMMAND	nvim/.config/nvim/plugins/config/fzf.config.vim	/^let $FZF_DEFAULT_COMMAND="rg --files --hidden"$/;"	v
$FZF_DEFAULT_OPTS	nvim/.config/nvim/plugins/config/fzf.config.vim	/^let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'$/;"	v
;	nvim/.config/nvim/settings/base-settings.vim	/^noremap ; l$/;"	m
<A-x>	nvim/.config/nvim/plugins/config/floaterm.config.vim	/^nnoremap <A-x> :call Term_toggle()<cr>$/;"	m
<C-h>	nvim/.config/nvim/settings/base-settings.vim	/^map <C-h> <C-W>h$/;"	m
<C-j>	nvim/.config/nvim/plugins/config/snippets.config.vim	/^imap <C-j> <Plug>(coc-snippets-expand-jump)$/;"	m
<C-j>	nvim/.config/nvim/plugins/config/snippets.config.vim	/^vmap <C-j> <Plug>(coc-snippets-select)$/;"	m
<C-j>	nvim/.config/nvim/settings/base-settings.vim	/^map <C-j> <C-W>j$/;"	m
<C-k>	nvim/.config/nvim/settings/base-settings.vim	/^map <C-k> <C-W>k$/;"	m
<C-l>	nvim/.config/nvim/plugins/config/snippets.config.vim	/^imap <C-l> <Plug>(coc-snippets-expand)$/;"	m
<C-l>	nvim/.config/nvim/settings/base-settings.vim	/^map <C-l> <C-W>l$/;"	m
<C-s>	nvim/.config/nvim/plugins/config/coc.config.vim	/^nmap <silent> <C-s> <Plug>(coc-range-select)$/;"	m
<C-v>	nvim/.config/nvim/settings/vscode-settings.vim	/^nnoremap <silent> <script> <C-v> <C-v><SID>SetCursorLineNrColorVisual$/;"	m
<C-w>_	nvim/.config/nvim/settings/vscode-settings.vim	/^nnoremap <silent> <C-w>_ :<C-u>call VSCodeNotify('workbench.action.toggleEditorWidths')<CR>$/;"	m
<C-w>n	nvim/.config/nvim/settings/vscode-settings.vim	/^nnoremap <silent> <C-w>n :call <SID>splitNew('h', '__vscode_new__')<CR>$/;"	m
<C-w>s	nvim/.config/nvim/settings/vscode-settings.vim	/^nnoremap <silent> <C-w>s :call <SID>split('h')<CR>$/;"	m
<C-w>v	nvim/.config/nvim/settings/vscode-settings.vim	/^nnoremap <silent> <C-w>v :call <SID>split('v')<CR>$/;"	m
<SID>SetCursorLineNrColorVisual	nvim/.config/nvim/settings/vscode-settings.vim	/^vnoremap <silent> <expr> <SID>SetCursorLineNrColorVisual SetCursorLineNrColorVisual()$/;"	m
<SPACE>	nvim/.config/nvim/settings/neovim-settings.vim	/^nnoremap <SPACE> <Nop>$/;"	m
<Space>	nvim/.config/nvim/settings/vscode-settings.vim	/^nnoremap <silent> <Space> :call VSCodeNotify('whichkey.show')<CR>$/;"	m
<leader>	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^nnoremap <silent> <leader> :silent WhichKey '<Space>'<CR>$/;"	m
<leader>	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^vnoremap <silent> <leader> :silent <c-u> :silent WhichKeyVisual '<Space>'<CR>$/;"	m
<leader>/	nvim/.config/nvim/plugins/config/easymotion.vim	/^map <leader>\/ <Plug>(easymotion-bd-w)$/;"	m
<leader>/	nvim/.config/nvim/plugins/config/easymotion.vim	/^nmap <leader>\/ <Plug>(easymotion-overwin-w)$/;"	m
<leader>d<space>	nvim/.config/nvim/plugins/config/inspector.vim	/^ nnoremap <leader>d<space> :call vimspector#Continue()<CR>$/;"	m
<leader>d_	nvim/.config/nvim/plugins/config/inspector.vim	/^ nmap <leader>d_ <Plug>VimspectorRestart$/;"	m
<leader>dbp	nvim/.config/nvim/plugins/config/inspector.vim	/^ nmap <leader>dbp <Plug>VimspectorToggleBreakpoint$/;"	m
<leader>dc	nvim/.config/nvim/plugins/config/inspector.vim	/^ nnoremap <leader>dc :call GotoWindow(g:vimspector_session_windows.code)<CR>$/;"	m
<leader>dcbp	nvim/.config/nvim/plugins/config/inspector.vim	/^ nmap <leader>dcbp <Plug>VimspectorToggleConditionalBreakpoint$/;"	m
<leader>dd	nvim/.config/nvim/plugins/config/inspector.vim	/^ nnoremap <leader>dd :call vimspector#Launch()<CR>$/;"	m
<leader>de	nvim/.config/nvim/plugins/config/inspector.vim	/^ nnoremap <leader>de :call vimspector#Reset()<CR>$/;"	m
<leader>dj	nvim/.config/nvim/plugins/config/inspector.vim	/^ nmap <leader>dj <Plug>VimspectorStepOver$/;"	m
<leader>dk	nvim/.config/nvim/plugins/config/inspector.vim	/^ nmap <leader>dk <Plug>VimspectorStepOut$/;"	m
<leader>dl	nvim/.config/nvim/plugins/config/inspector.vim	/^ nmap <leader>dl <Plug>VimspectorStepInto$/;"	m
<leader>do	nvim/.config/nvim/plugins/config/inspector.vim	/^ nnoremap <leader>do :call$/;"	m
<leader>drc	nvim/.config/nvim/plugins/config/inspector.vim	/^ nmap <leader>drc <Plug>VimspectorRunToCursor$/;"	m
<leader>ds	nvim/.config/nvim/plugins/config/inspector.vim	/^ nnoremap <leader>ds :call$/;"	m
<leader>dt	nvim/.config/nvim/plugins/config/inspector.vim	/^ nnoremap <leader>dt :call$/;"	m
<leader>dtcb	nvim/.config/nvim/plugins/config/inspector.vim	/^ nnoremap <leader>dtcb :call vimspector#CleanLineBreakpoint()<CR>$/;"	m
<leader>dv	nvim/.config/nvim/plugins/config/inspector.vim	/^ nnoremap <leader>dv :call$/;"	m
<leader>dw	nvim/.config/nvim/plugins/config/inspector.vim	/^ nnoremap <leader>dw :call$/;"	m
<leader>gJ	nvim/.config/nvim/plugins/config/signify.config.vim	/^nmap <leader>gJ 9999<leader>gJ$/;"	m
<leader>gK	nvim/.config/nvim/plugins/config/signify.config.vim	/^nmap <leader>gK 9999<leader>gk$/;"	m
<leader>gj	nvim/.config/nvim/plugins/config/signify.config.vim	/^nmap <leader>gj <plug>(signify-next-hunk)$/;"	m
<leader>gk	nvim/.config/nvim/plugins/config/signify.config.vim	/^nmap <leader>gk <plug>(signify-prev-hunk)$/;"	m
<leader>m	nvim/.config/nvim/plugins/config/inspector.vim	/^ nnoremap <leader>m :MaximizerToggle!<CR>$/;"	m
<nowait><expr>	nvim/.config/nvim/plugins/config/coc.config.vim	/^  vnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#nvim_scroll(0, 1) : "\\<C-b>"$/;"	m
<nowait><expr>	nvim/.config/nvim/plugins/config/coc.config.vim	/^  vnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#nvim_scroll(1, 1) : "\\<C-f>"$/;"	m
<nowait><expr>	nvim/.config/nvim/plugins/config/coc.config.vim	/^inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\\<c-r>=coc#float#scroll(0)\\<cr>" : "\\<Left>"$/;"	m
<nowait><expr>	nvim/.config/nvim/plugins/config/coc.config.vim	/^inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\\<c-r>=coc#float#scroll(1)\\<cr>" : "\\<Right>"$/;"	m
<nowait><expr>	nvim/.config/nvim/plugins/config/coc.config.vim	/^nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\\<C-b>"$/;"	m
<nowait><expr>	nvim/.config/nvim/plugins/config/coc.config.vim	/^nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\\<C-f>"$/;"	m
<space>r	nvim/.config/nvim/plugins/config/ranger.config.vim	/^nmap <space>r :RnvimrToggle<CR>$/;"	m
CursorLineNrColorSwap	nvim/.config/nvim/settings/vscode-settings.vim	/^augroup CursorLineNrColorSwap$/;"	a
Files	nvim/.config/nvim/plugins/config/fzf.config.vim	/^command! -bang -nargs=? -complete=dir Files$/;"	c
Fold	nvim/.config/nvim/plugins/config/coc.config.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Format	nvim/.config/nvim/plugins/config/coc.config.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
GGrep	nvim/.config/nvim/plugins/config/fzf.config.vim	/^command! -bang -nargs=* GGrep$/;"	c
K	nvim/.config/nvim/plugins/config/coc.config.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
New	nvim/.config/nvim/settings/vscode-settings.vim	/^command! -complete=file -nargs=? New call <SID>split('h', '__vscode_new__')$/;"	c
OR	nvim/.config/nvim/plugins/config/coc.config.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
Only	nvim/.config/nvim/settings/vscode-settings.vim	/^command! -bang Only if <q-bang> == '!' | call <SID>closeOtherEditors() | else | call VSCodeNotify('workbench.action.joinAllGroups') | endif$/;"	c
PlugCoc	nvim/.config/nvim/plugins/config/coc.config.vim	/^function! PlugCoc(info) abort$/;"	f
Rg	nvim/.config/nvim/plugins/config/fzf.config.vim	/^command! -bang -nargs=* Rg$/;"	c
RipgrepFzf	nvim/.config/nvim/plugins/config/fzf.config.vim	/^function! RipgrepFzf(query, fullscreen)$/;"	f
SetCursorLineNrColorInsert	nvim/.config/nvim/settings/vscode-settings.vim	/^function! SetCursorLineNrColorInsert(mode)$/;"	f
SetCursorLineNrColorVisual	nvim/.config/nvim/settings/vscode-settings.vim	/^function! SetCursorLineNrColorVisual()$/;"	f
Split	nvim/.config/nvim/settings/vscode-settings.vim	/^command! -complete=file -nargs=? Split call <SID>split('h', <q-args>)$/;"	c
Term_toggle	nvim/.config/nvim/plugins/config/floaterm.config.vim	/^function! Term_toggle()$/;"	f
V	nvim/.config/nvim/settings/vscode-settings.vim	/^nnoremap <silent> <script> V V<SID>SetCursorLineNrColorVisual$/;"	m
Vnew	nvim/.config/nvim/settings/vscode-settings.vim	/^command! -complete=file -nargs=? Vnew call <SID>split('v', '__vscode_new__')$/;"	c
Vsplit	nvim/.config/nvim/settings/vscode-settings.vim	/^command! -complete=file -nargs=? Vsplit call <SID>split('v', <q-args>)$/;"	c
ac	nvim/.config/nvim/plugins/config/coc.config.vim	/^omap ac <Plug>(coc-classobj-a)$/;"	m
add	nvim/.config/nvim/rplugin/node/todo/src/utils.js	/^  add: (type, logMsg) => {$/;"	p	class:const
add	nvim/.config/nvim/rplugin/node/todoPlug/utils.js	/^  add: (type, logMsg) => {$/;"	p	class:const
af	nvim/.config/nvim/plugins/config/coc.config.vim	/^omap af <Plug>(coc-funcobj-a)$/;"	m
backtrace	scripts/.config/scripts/lib.trap.sh	/^function backtrace$/;"	f
closeOtherEditors	nvim/.config/nvim/settings/vscode-settings.vim	/^function! s:closeOtherEditors()$/;"	f
env	nvim/.config/nvim/rplugin/node/todo/.eslintrc.js	/^    'env': {$/;"	p	class:module.exports
exit_handler	scripts/.config/scripts/lib.trap.sh	/^function exit_handler ()$/;"	f
f	nvim/.config/nvim/plugins/config/easymotion.vim	/^nmap f <Plug>(easymotion-overwin-f2)$/;"	m
g:airline#extensions#tabline#enabled	nvim/.config/nvim/plugins/config/airline.config.vim	/^ let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#left_alt_sep	nvim/.config/nvim/plugins/config/airline.config.vim	/^ let g:airline#extensions#tabline#left_alt_sep = ''$/;"	v
g:airline#extensions#tabline#left_sep	nvim/.config/nvim/plugins/config/airline.config.vim	/^ let g:airline#extensions#tabline#left_sep = ''$/;"	v
g:airline#extensions#tabline#right_alt_sep	nvim/.config/nvim/plugins/config/airline.config.vim	/^ let g:airline#extensions#tabline#right_alt_sep = ''$/;"	v
g:airline#extensions#tabline#right_sep	nvim/.config/nvim/plugins/config/airline.config.vim	/^ let g:airline#extensions#tabline#right_sep = ''$/;"	v
g:airline_powerline_fonts	nvim/.config/nvim/plugins/config/airline.config.vim	/^ let g:airline_powerline_fonts = 1$/;"	v
g:airline_theme	nvim/.config/nvim/plugins/config/airline.config.vim	/^ let g:airline_theme = 'cobalt2'$/;"	v
g:coc_explorer_global_presets	nvim/.config/nvim/plugins/config/coc.config.vim	/^let g:coc_explorer_global_presets = {$/;"	v
g:coc_snippet_next	nvim/.config/nvim/plugins/config/snippets.config.vim	/^let g:coc_snippet_next = '<c-j>'$/;"	v
g:coc_snippet_prev	nvim/.config/nvim/plugins/config/snippets.config.vim	/^let g:coc_snippet_prev = '<c-k>'$/;"	v
g:codi#aliases	nvim/.config/nvim/plugins/config/codi.config.vim	/^let g:codi#aliases = {$/;"	v
g:codi#virtual_text_prefix	nvim/.config/nvim/plugins/config/codi.config.vim	/^let g:codi#virtual_text_prefix = "❯ "$/;"	v
g:easyescape_chars	nvim/.config/nvim/plugins/config/easyescape.config.vim	/^let g:easyescape_chars = { "j": 1, "k": 1 }$/;"	v
g:easyescape_timeout	nvim/.config/nvim/plugins/config/easyescape.config.vim	/^let g:easyescape_timeout = 100$/;"	v
g:far#enable_undo	nvim/.config/nvim/plugins/config/far.config.vim	/^let g:far#enable_undo=1$/;"	v
g:far#file_mask_favorites	nvim/.config/nvim/plugins/config/far.config.vim	/^let g:far#file_mask_favorites=['%:p', '**\/*.*', '**\/*.js', '**\/*.py', '**\/*.java', '**\/*.css', '**\/*.html', '**\/*.vim', '**\/*.cpp', '**\/*.c','**\/*.h', ]$/;"	v
g:far#source	nvim/.config/nvim/plugins/config/far.config.vim	/^let g:far#source='rgnvim'$/;"	v
g:far#window_min_content_width	nvim/.config/nvim/plugins/config/far.config.vim	/^let g:far#window_min_content_width=30$/;"	v
g:far#window_width	nvim/.config/nvim/plugins/config/far.config.vim	/^let g:far#window_width=60$/;"	v
g:floaterm_autoclose	nvim/.config/nvim/plugins/config/floaterm.config.vim	/^let g:floaterm_autoclose=1$/;"	v
g:floaterm_autoinsert	nvim/.config/nvim/plugins/config/floaterm.config.vim	/^let g:floaterm_autoinsert=1$/;"	v
g:floaterm_gitcommit	nvim/.config/nvim/plugins/config/floaterm.config.vim	/^let g:floaterm_gitcommit='floaterm'$/;"	v
g:floaterm_height	nvim/.config/nvim/plugins/config/floaterm.config.vim	/^let g:floaterm_height=0.9$/;"	v
g:floaterm_keymap_kill	nvim/.config/nvim/plugins/config/floaterm.config.vim	/^let g:floaterm_keymap_kill   = '<F5>'$/;"	v
g:floaterm_keymap_new	nvim/.config/nvim/plugins/config/floaterm.config.vim	/^let g:floaterm_keymap_new    = '<F4>'$/;"	v
g:floaterm_keymap_next	nvim/.config/nvim/plugins/config/floaterm.config.vim	/^let g:floaterm_keymap_next   = '<F2>'$/;"	v
g:floaterm_keymap_prev	nvim/.config/nvim/plugins/config/floaterm.config.vim	/^let g:floaterm_keymap_prev   = '<F3>'$/;"	v
g:floaterm_keymap_toggle	nvim/.config/nvim/plugins/config/floaterm.config.vim	/^let g:floaterm_keymap_toggle = '<F1>'$/;"	v
g:floaterm_width	nvim/.config/nvim/plugins/config/floaterm.config.vim	/^let g:floaterm_width=0.9$/;"	v
g:fzf_history_dir	nvim/.config/nvim/plugins/config/fzf.config.vim	/^let g:fzf_history_dir = '~\/.local\/share\/fzf-history'$/;"	v
g:fzf_layout	nvim/.config/nvim/plugins/config/fzf.config.vim	/^let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'highlight': 'Todo', 'border': 'sharp' } }$/;"	v
g:fzf_preview_window	nvim/.config/nvim/plugins/config/fzf.config.vim	/^let g:fzf_preview_window = ['right:50%', 'ctrl-\/']$/;"	v
g:fzf_tags_command	nvim/.config/nvim/plugins/config/fzf.config.vim	/^let g:fzf_tags_command = 'ctags -R'$/;"	v
g:qs_highlight_on_keys	nvim/.config/nvim/plugins/config/quickscope.config.vim	/^let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']$/;"	v
g:qs_max_chars	nvim/.config/nvim/plugins/config/quickscope.config.vim	/^let g:qs_max_chars=150" Trigger a highlight in the appropriate direction when pressing these keys:$/;"	v
g:qs_max_chars	nvim/.config/nvim/plugins/config/quickscope.config.vim	/^let g:qs_max_chars=150$/;"	v
g:rnvimr_ex_enable	nvim/.config/nvim/plugins/config/ranger.config.vim	/^let g:rnvimr_ex_enable = 1$/;"	v
g:signify_sign_add	nvim/.config/nvim/plugins/config/signify.config.vim	/^let g:signify_sign_add               = '+'$/;"	v
g:signify_sign_change	nvim/.config/nvim/plugins/config/signify.config.vim	/^let g:signify_sign_change            = '~'$/;"	v
g:signify_sign_delete	nvim/.config/nvim/plugins/config/signify.config.vim	/^let g:signify_sign_delete            = '_'$/;"	v
g:signify_sign_delete_first_line	nvim/.config/nvim/plugins/config/signify.config.vim	/^let g:signify_sign_delete_first_line = '‾'$/;"	v
g:signify_sign_show_count	nvim/.config/nvim/plugins/config/signify.config.vim	/^let g:signify_sign_show_count = 0$/;"	v
g:signify_sign_show_text	nvim/.config/nvim/plugins/config/signify.config.vim	/^let g:signify_sign_show_text = 1$/;"	v
g:sneak#label	nvim/.config/nvim/plugins/config/sneak.config.vim	/^let g:sneak#label = 1$/;"	v
g:sneak#prompt	nvim/.config/nvim/plugins/config/sneak.config.vim	/^let g:sneak#prompt = '🔎'$/;"	v
g:sneak#s_next	nvim/.config/nvim/plugins/config/sneak.config.vim	/^let g:sneak#s_next = 1$/;"	v
g:sneak#use_ic_scs	nvim/.config/nvim/plugins/config/sneak.config.vim	/^let g:sneak#use_ic_scs = 1$/;"	v
g:startify_bookmarks	nvim/.config/nvim/plugins/config/start_page.config.vim	/^let g:startify_bookmarks = [$/;"	v
g:startify_change_to_vcs_root	nvim/.config/nvim/plugins/config/start_page.config.vim	/^let g:startify_change_to_vcs_root = 1$/;"	v
g:startify_custom_header	nvim/.config/nvim/plugins/config/start_page.config.vim	/^let g:startify_custom_header = [$/;"	v
g:startify_enable_special	nvim/.config/nvim/plugins/config/start_page.config.vim	/^let g:startify_enable_special = 0$/;"	v
g:startify_lists	nvim/.config/nvim/plugins/config/start_page.config.vim	/^let g:startify_lists = [$/;"	v
g:startify_session_persistence	nvim/.config/nvim/plugins/config/start_page.config.vim	/^let g:startify_session_persistence = 1$/;"	v
g:term_buf	nvim/.config/nvim/plugins/config/floaterm.config.vim	/^let g:term_buf = 0$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map =  {}$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map.a = {$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map.b = {$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map.c = {$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map.f = {$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map.g = {$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map.s = {$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map.t = {$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map.w = {$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map.x = {$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map[';'] = [ '<C-W>l'                 , 'right' ]$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map['J'] = [ ':windo wincmd K'        , 'change splits horizontal' ]$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map['K'] = [ ':windo wincmd H'        , 'change splits vertical' ]$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map['e'] = [ ':CocCommand explorer --position right --width 70', 'explorer' ]$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map['j'] = [ '<C-W>h'                 , 'left' ]$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map['k'] = [ '<C-W>j'                 , 'down' ]$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map['l'] = [ '<C-W>k'                 , 'up' ]$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map['q'] = [ ':Startify'                  , 'startify' ]$/;"	v
g:which_key_map	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_map['r'] = [ ':Ranger'                    , 'ranger' ]$/;"	v
g:which_key_sep	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_sep = '→'$/;"	v
g:which_key_use_floating_win	nvim/.config/nvim/plugins/config/whichkey.config.vim	/^let g:which_key_use_floating_win = 0$/;"	v
gd	nvim/.config/nvim/plugins/config/coc.config.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gi	nvim/.config/nvim/plugins/config/coc.config.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
git_upload_ssh_key	scripts/.config/scripts/init.sh	/^function git_upload_ssh_key () {$/;"	f
gr	nvim/.config/nvim/plugins/config/coc.config.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	nvim/.config/nvim/plugins/config/coc.config.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
h	nvim/.config/nvim/settings/base-settings.vim	/^noremap h ;$/;"	m
ic	nvim/.config/nvim/plugins/config/coc.config.vim	/^omap ic <Plug>(coc-classobj-i)$/;"	m
if	nvim/.config/nvim/plugins/config/coc.config.vim	/^omap if <Plug>(coc-funcobj-i)$/;"	m
info	nvim/.config/nvim/rplugin/node/todo/src/utils.js	/^  info: (msg) => {$/;"	p	class:const
info	nvim/.config/nvim/rplugin/node/todoPlug/utils.js	/^  info: (msg) => {$/;"	p	class:const
j	nvim/.config/nvim/settings/base-settings.vim	/^noremap j h$/;"	m
jk	nvim/.config/nvim/plugins/config/easyescape.config.vim	/^cnoremap jk <ESC>$/;"	m
k	nvim/.config/nvim/settings/base-settings.vim	/^noremap k j$/;"	m
kj	nvim/.config/nvim/plugins/config/easyescape.config.vim	/^cnoremap kj <ESC>$/;"	m
l	nvim/.config/nvim/settings/base-settings.vim	/^noremap l k$/;"	m
log	scripts/.config/scripts/init.sh	/^function log() {$/;"	f
manageEditorSize	nvim/.config/nvim/settings/vscode-settings.vim	/^function! s:manageEditorSize(...)$/;"	f
mapleader	nvim/.config/nvim/settings/neovim-settings.vim	/^let mapleader=" "$/;"	v
openTodoFile	nvim/.config/nvim/rplugin/node/todo/src/index.js	/^  function openTodoFile(plugin) {$/;"	f	function:function
projects	scripts/.config/scripts/project_launcher	/^projects() {$/;"	f
setLine	nvim/.config/nvim/rplugin/node/todo/src/index.js	/^  function setLine(plugin) {$/;"	f	function:function
setLine	nvim/.config/nvim/rplugin/node/todoPlug/index.js	/^  function setLine() {$/;"	f	function:function
show_documentation	nvim/.config/nvim/plugins/config/coc.config.vim	/^function! s:show_documentation()$/;"	f
split	nvim/.config/nvim/settings/vscode-settings.vim	/^function! s:split(...) abort$/;"	f
splitNew	nvim/.config/nvim/settings/vscode-settings.vim	/^function! s:splitNew(...)$/;"	f
store	nvim/.config/nvim/rplugin/node/todo/src/utils.js	/^  store: (data, path) => {$/;"	p	class:const
store	nvim/.config/nvim/rplugin/node/todoPlug/utils.js	/^  store: (data, path) => {$/;"	p	class:const
v	nvim/.config/nvim/settings/vscode-settings.vim	/^nnoremap <silent> <script> v v<SID>SetCursorLineNrColorVisual$/;"	m
